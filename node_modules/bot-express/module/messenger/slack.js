//'use strict';

Promise = require("bluebird");
const request = require("request");
const debug = require("debug")("bot-express:slack");
const slack_bot_sdk = require('@slack/client').WebClient;

Promise.promisifyAll(request);

module.exports = class MessengerSlack {

  constructor(options){
    const token = options.slack_access_token;
    this.sdk = new slack_bot_sdk(token);
  }

  send(event, to, message) {
    if (["development", "test"].includes(process.env.BOT_EXPRESS_ENV)) {
      debug("This is test so we skip the actual call out.");
      return Promise.resolve();
    }
    return event.json(to, messages);
  }

  reply(event, messages) {
    if (["development", "test"].includes(process.env.BOT_EXPRESS_ENV)) {
      debug("This is test so we skip the actual call out.");
      return Promise.resolve();
    }
    if (messages.length == 1) {
      return this.sdk.chat.postMessage({ channel: event.channel_id, text: messages[0].text })
    } else {
      return this.sdk.chat.postMessage({ channel: event.channel_id, text: messages[0].text })
    }
  }

  validate_signature(req) {
    return true;
  }

  static extract_events(body) {
    let bodies = [];
    bodies = bodies.concat(body);
    return bodies;
  }

  static extract_message(event) {
    return event;
  }

  static extract_message_text(event) {
    return event.text;
  }

  static extract_sender_id(event) {
    if (event.type === "bot-express:push") {
      return MessengerSlack.extract_to_id(event);
    }
    return event.user_id;
  }

  static identify_event_type(event) {
    if (!event.text) {
      return "unidentified";
    } else {
      var type = "message";
    }
    return type;
  }

  static identify_message_type(event) {
    let message_type;
    for (var key in event) {
      if (key === "text") {
        message_type = key;
        break;
      }
    }
    if (message_type) {
      return message_type;
    } else {
      throw new Error("This is not correct slack format");
    }
  }

  static check_supported_event_type(flow, event) {
    if (event.text) {
      event.type = "message";
    }
    switch(flow) {
      case "start_conversation":
        if (event.type == "message" || event.type == "postback") {
          return true;
        }
        return false;
      break;
      case "reply":
        if (event.type == "message" || event.type == "postback") {
          return true;
        }
        return false;
      break;
      case "btw":
        if (event.type == "message" || event.type == "postback") {
          return true;
        }
        return false;
      break;
      default:
        return false;
      break;
    }
  }
}
